=============
Маршрутизация
=============

Экземпляры Event_ которые имеют тип ``EventTypes.text`` могут быть маршрутизированы с помощью правил.

`Правило` - набор ключей для описания подходящего ивента, а так-же указание источника и приемника для подходящего ивента.


Пример:

.. code-block:: yaml

    ver: "1.0"
    rules:
      rule_2:
        senders: [calendar]
        before_ext: [num_to_word]
        purposes: [remind]
        acceptors: [silero]
    ...


В данном примере правило работает так:
Все ивенты из модуля `calendar`, чей `purpose` соответсвует `"remind"`, будут преобразованы [расширением](Модули/event_utils.md) `num_to_word` (оно преобразует цифры цифры в текст, т.е. "123" > "сто двадцать три") и переданы на вход модуля `silero` который генерирует озвучку. По сути правило "озвучивает напоминания из календаря".

Keys:
* `ver` - версия файла маршрутизации
* `rules` - список правил маршрутизации

Правила маршрутизации содержат несколько ключей определяющих пути и дополнительную обработку ивентов.

Ключ `senders` содержит список названий модулей выходные очереди которых будут прослушиваться для маршрутизации. [Ивенты](Ивенты.md) из очередей этих  будут взяты для применения к ним расширений из списка `before_ext`, но при наличии `purposes` ивенты будут фильтроваться по этому свойству. После применеия расширений ивент будет отправлен в входные очереди модулей содержащиеся в списке `acceptors`.


Существует вариант использования расширений включающий параметры расширения для тех расширений которые поддерживают/требуют параметры.

Пример использования расширения смены типа ивента:

.. code-block:: yaml

    rule_n:
      senders: [any_module]
      before_ext: [
        any_ext,
        [change_type, {new_type: "user_command"}]
      ]
      purposes: [any_purpose]
      acceptors: [any_module2]


В данном примере есть два расширения: `any_ext` и `change_type`
Расширение `any_ext` - стандартное использование расширения.
`change_type` - расширение представленно в виде списка из двух элементов, где первым элементом передается название расширения, а вторым передается именованый список ключей и их значений - параметров расширения, которые будут переданы в функцию расширения в качестве именованых параметров функции.

Модули - интерфейсы
-------------------
Помимо функциональных модулей наподобии календаря есть модули реализующие интерфейс ввода-вывода информации.
Такие модули могут быть одновременно и входом и выходом (телеграм бот) или только входом (воск) или только выходом (силеро).

Модули реализующие интерфейс для взаимодействия с пользователем, но не полный, если они содержат только одну входящюю или одну исходящюю очереди,
могут быть настроены таким образом, чтобы ответ приходил в другой модуль, отличный от того через который пользователь отправил команду.

Асоции интерфейсов ввода-вывода задаются в файле `connections/config.yml` либо в папке модуля.
Для создания асоции надо добавить ключ ``io_pairs`` в файл `config.yml`, он должен содержать пары `ключ: значение`,
где ключ - модуль из которого приходит ивент (тот с которым пользователь взаимодействует для создания ивента),
значение - модуль в входную очередь которого надо вернуть ответ (тот через который пользователь сможет получить ответ).

Пример:

.. code-block:: yaml

    io_pairs:
      vosk: silero

`Ассоциация работает так: ответы которые приходят для vosk (в ответ на ивенты из воска) перенаправлять в silero`


.. _Event: /events.html