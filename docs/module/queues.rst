=======
Очереди
=======
Очереди - основной интерфеис взаимодействия модулей. Модули кладут или забирают ивенты из своих очередей.

Взаимодействие
==============

Взаимодействие происходит через очередь `ивентов </events.html>`__. Для взаимодействия с ними есть два варианта:

- `Входная очередь` - используется для обработки ивентов которые приходят в модуль для обработки или выполнения действия
- `Выходная очередь` - используется для того чтобы модуль отправлял ивенты для обработки ядром

Выходная очередь
================

Ассинхронная функция которая будет вызвана один раз при запуске,
в функцию будет передана выходная очередь иветны из которой будет обрабатывать ядро.

Модуль может по мере готовности данных формировать ивент и добавлять его в очередь.

**my_module_file.py**

.. code-block:: python

    from event import EventTypes, Event # import event classes


    async def my_function(queue: asyncio.Queue = None, config: dict = None):
        while True:
            await asyncio.sleep(5)
            data = "123" # get data from services/websocket/http requests...
            await queue.put(
                Event(
                    event_type=EventTypes.text,
                    value=data
                )
            )


Для того чтобы использовать очередь нужно добавить переменную ``sender`` в **main.py** файл модуля и передать в неё ссылку на функцию.

**main.py**

.. code-block:: python

    # imports and other settings
    from .my_module_file import my_function # import intent function

    sender = my_function


- my_function - `ссылка` на **асинхронную** функцию, функция должна быть импортирована и передана ссылка на нее - т.е. надо написать функцию без скобок.


Параметры:

- `queue` - выходная очередь, в которую модуль добавляет ивенты
- `config` - настройки модуля содержащиеся в `config` в файле settings.json

В данный момент доступно два типа ивентов:

- `text` - это ивент значением которого является строка. Такой ивент не обрабатывается как команда пользователя, однако он может быть перенаправлен через [конфигурацию подключения ивентов](Конфигурация.md) модулей.
- `user_command` - этот тип ивентов предназначен для модулей интерфейсов, такие события обрабатываются как команды пользователя

Входная очередь
===============

Работает по тому же принципу, только для настройки используется переменная *acceptor* в *main.py* файле модуля. Логика работы меняется на противоположную - постоянное прослушивание очереди для получения входного ивента и дальнейшей обработки данных из него.
